#!/usr/bin/python

import sys
import subprocess
import os.path
import hashlib
import json
import fnmatch

#LOG_LEVEL='INFO'
LOG_LEVEL='DEBUG'

def usage():
  print "%s usage" % sys.argv[0]

def get_root():
  return subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).rstrip()

def get_remote():
  file = open('%s/.got/storage' % get_root(), 'r')
  configuration = json.load(file)
  return configuration['remote']

num_args = len(sys.argv)

if num_args < 2:
  usage()
  exit()

command = sys.argv[1]

def get_got_filename(fully_qualified_filename):
  (root, filename) = os.path.split(fully_qualified_filename)
  return '%s/.%s.got' % (root, filename)

def add_cb(filename):
  log_debug('add_cb: Adding %s' % filename)
  sum = subprocess.check_output(['md5', '-q', filename]).rstrip()
  remote = get_remote()
  subprocess.check_call(['scp', filename, '%s/%s.got' % (remote, sum)])
  got_filename = get_got_filename(filename)
  hash_file = open(got_filename, 'w')
  hash_file.write('%s' % sum)
  hash_file.close()
  subprocess.check_call(['git', 'add', got_filename])
  file = open('%s/.gitignore' % get_root(), 'w')
  file.write('%s\n' % filename)
  file.close()

def status_cb(filename):
  actual_filename = filename[1:-4]
  log_debug('Actual %s' % actual_filename)
  if not os.path.exists(actual_filename):
    return 'Remote: %s' % actual_filename
  sum1 = subprocess.check_output(['md5', '-q', actual_filename]).rstrip()
  sum2 = open(filename).read().rstrip()
  if sum1 != sum2:
    return 'Changed: %s' % actual_filename

def start_transaction():
  pass

def end_transaction():
  pass

def log_debug(message):
  if LOG_LEVEL == 'DEBUG':
    print 'DEBUG: %s' % message

def walker(function, args):
  output = []
  start_transaction()
  for arg in args:
    log_debug('walker: processing argument %s' % arg)
    if os.path.isfile(arg):
      log_debug('walker: processing file %s' % arg)
      output.append(function(arg))
    else:
      for _, dirs, filenames in os.walk(arg):
        if '.git' in dirs:
          dirs.remove('.git')
        if '.got' in dirs:
          dirs.remove('.got')
        for dir in dirs:
          # @TODO Will be susceptible to circular links
          log_debug('walker: recursing into %s' % dir)
          output.append(walker(function, [dir]))
        for filename in fnmatch.filter(filenames, '.*.got'):
          log_debug('walker: processing file %s' % filename)
          output.append(function(filename))
  end_transaction()

  return output

if command == 'init':
  start_transaction()
  os.mkdir('%s/.got' % root)
  remote = sys.argv[2]
  configuration = { 'remote' : remote }
  file = open('%s/.got/storage' % root, 'w')
  json.dump(configuration, file)
  file.close()
  subprocess.check_call(['git', 'add', '%s/.got' % root])
  end_transaction()
elif command == 'add':
  log_debug('main: Add command %s' % sys.argv[2:])
  walker(add_cb, sys.argv[2:])
elif command == 'reset':
  walker(reset_cb, sys.argv[2:])
elif command == 'get':
  walker(get_cb, sys.argv[2:])
elif command == 'status':
  changed = walker(status_cb, [get_root()])
  print 'Changes\n-------\n%s' % changed
else:
  usage()

# vim: set filetype=python :
