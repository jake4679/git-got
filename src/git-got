#!/usr/bin/python

import sys
import subprocess
import os.path
import hashlib
import json
import fnmatch
import hashlib

DEFAULT_LOG_LEVELS=['INFO', 'WARN', 'ERROR']

LOG_LEVELS = DEFAULT_LOG_LEVELS

def usage():
  print 'git got <command> [<args>]'
  print
  print 'The most commonly used git got commands are:'
  print '  init   Initialize the remote to be used with the repository'
  print '  get    Retrieve all remote files to the local working area'
  print '  add    Add a file to the remote repository'
  print '  status Request the status of a got tracked file'
  print '  reset  Ovewrite a gotted file with the remote copy'

root_valid = False
root_path = ""

def get_root():
  global root_valid
  global root_path
  if not root_valid:
    root_path = subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).rstrip()
    root_valid = True
  return root_path

configuration_loaded = False
configuration = []

def file_hash(filename):
  hasher = hashlib.sha1()
  file = open(filename, 'rb')
  try:
    while True:
      data = file.read(8192)
      if not data:
        break
      hasher.update(data)
  except Exception as e:
    raise
  finally:
    file.close()
  return hasher.hexdigest()

def load_configuration():
  global configuration_loaded
  global configuration
  if not configuration_loaded:
    file = open('%s/.got/storage' % get_root(), 'r')
    configuration = json.load(file)
    file.close()
    configuration_loaded = True
  return configuration

def get_remote():
  configuration = load_configuration()
  return configuration['remote']

def get_local_got_filename(fully_qualified_filename):
  (base, filename) = os.path.split(fully_qualified_filename)
  return os.path.join(base, '.%s.got' % filename)

def get_real_filename(fully_qualified_filename):
  (root, filename) = os.path.split(fully_qualified_filename)
  return os.path.join(root, filename[1:-4])

def get_cb(filename):
  try:
    real_filename = get_real_filename(filename)
    log_debug('get_cb: Using %s for local file' % real_filename)
    sum = open(filename).read().rstrip()
    remote = get_remote()
    subprocess.check_call(['scp', '%s/%s.got' % (remote, sum), real_filename])
  except Exception as e:
    log_error('Failed to retrieve file %s' % filename, e)

def reset_cb(filename):
  try:
    log_debug('reset_cb: Reseting %s' % filename)
    got_filename = get_local_got_filename(filename)
    log_debug('reset_cb: Using %s for local got file' % got_filename)
    sum = open(got_filename).read().rstrip()
    remote = get_remote()
    subprocess.check_call(['scp', '%s/%s.got' % (remote, sum), filename])
  except Exception as e:
    log_error('Failed to reset %s' % filename, e)

def add_cb(filename):
  try:
    log_debug('add_cb: Adding %s' % filename)
    sum = file_hash(filename)
    remote = get_remote()
    subprocess.check_call(['scp', filename, '%s/%s.got' % (remote, sum)])
    got_filename = get_local_got_filename(filename)
    hash_file = open(got_filename, 'w')
    hash_file.write('%s' % sum)
    hash_file.close()
    subprocess.check_call(['git', 'add', got_filename])
    file = open('%s/.gitignore' % get_root(), 'w')
    file.write('%s\n' % filename)
    file.close()
  except Exception as e:
    print sys.exc_traceback.tb_lineno
    log_error('Failed to add %s' % filename, e)

def status_cb(filename):
  try:
    actual_filename = get_real_filename(filename)
    log_debug('Actual %s' % actual_filename)
    if not os.path.exists(actual_filename):
      return 'Remote: %s' % actual_filename
    sum1 = file_hash(actual_filename)
    sum2 = open(filename).read().rstrip()
    if sum1 != sum2:
      return 'Modified: %s' % actual_filename
  except Exception as e:
    log_error('Failed to status %s' % filename, e)

def start_transaction():
  pass

def end_transaction():
  pass

def log(level, message, exception):
  if None is exception:
    print '%s : %s' % (level, message)
  else:
    print '%s:%s:%s' % (level, message, exception)

def log_error(message, exception = None):
  if 'ERROR' in LOG_LEVELS:
    log('ERROR', message, exception)

def log_warn(message, exception = None):
  if 'WARN' in LOG_LEVELS:
    log('WARN', message, exception)

def log_info(message, exception = None):
  if 'INFO' in LOG_LEVELS:
    log('INFO', message, exception)

def log_debug(message, exception = None):
  if 'DEBUG' in LOG_LEVELS:
    log('DEBUG', message, exception)

def upgrade_cb(new):
  pass

def walker(function, args):
  output = []
  for arg in args:
    log_debug('walker: processing argument %s' % arg)
    if os.path.isfile(arg):
      log_debug('walker: processing file %s' % arg)
      output.append(function(arg))
    else:
      for base, dirs, filenames in os.walk(arg):
        if '.git' in dirs:
          dirs.remove('.git')
        if '.got' in dirs:
          dirs.remove('.got')
        for filename in fnmatch.filter(filenames, '.*.got'):
          log_debug('walker: processing file %s/%s' % (base, filename))
          output.append(function('%s/%s' % (base, filename)))
  return output

def check_initialized():
  if os.path.isfile('%s/.got/storage' % get_root()):
    return True
  return False

def check_version(version):
  configuration = load_configuration()
  if VERSION != configuration['version']:
    return False
  return True

VERSION = 0

num_args = len(sys.argv)

if num_args < 2:
  usage()
  exit()

command = sys.argv[1]

if command == 'init':
  start_transaction()
  try:
    os.mkdir('%s/.got' % get_root())
  except OSError:
    # This means the directory already existed according to
    # the python documentation
    pass
  remote = sys.argv[2]
  configuration = { 'remote' : remote , 'version' : VERSION }
  file = open('%s/.got/storage' % get_root(), 'w')
  json.dump(configuration, file)
  file.close()
  subprocess.check_call(['git', 'add', '%s/.got' % get_root()])
  file = open('%s/.gitignore' % get_root(), 'w')
  file.close()
  subprocess.check_call(['git', 'add', '%s/.gitignore' % get_root()])
  end_transaction()
elif not check_initialized():
  print 'Got not initialized\n'
  usage()
  exit()
elif command == 'upgrade':
  upgrade_cb(VERSION)
elif not check_version(VERSION):
  print 'Version of got repository requires upgrading, run upgrade command'
  usage()
  exit()
elif command == 'add':
  start_transaction()
  log_debug('main: Add command %s' % sys.argv[2:])
  walker(add_cb, sys.argv[2:])
  end_transaction()
elif command == 'reset':
  walker(reset_cb, sys.argv[2:])
elif command == 'get':
  walker(get_cb, [get_root()])
elif command == 'status':
  changes = walker(status_cb, [get_root()])
  print '# Changes',
  for change in changes:
    if None != change:
      print '\n# %s' % change,
  print '\n',
else:
  usage()

# vim: set filetype=python :
