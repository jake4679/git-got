#!/usr/bin/python

import sys
import subprocess
import os.path
import hashlib
import json
import fnmatch

def usage():
  print "%s usage" % sys.argv[0]

def get_root():
  return subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).rstrip()

def get_remote():
  file = open('%s/.got/storage' % get_root(), 'r')
  configuration = json.load(file)
  return configuration['remote']

if len(sys.argv) <= 1:
  usage()
  exit()

command = sys.argv[1]

if command == 'init':
  root = get_root()

  if os.path.isfile('%s/CV.got' % root):
    print 'Repository already initialized'
    exit()

  try:
    os.mkdir('%s/.got' % root)

    remote = sys.argv[2]
    configuration = { 'remote' : remote }
    file = open('%s/.got/storage' % root, 'w')
    json.dump(configuration, file)
    file.close()

    subprocess.check_call(['git', 'add', '%s/.got' % get_root()])
    subprocess.check_call(['git', 'commit', '-m', 'Initializing got repository', '%s/.got' % get_root()])
  except OSError:
    print 'Repository already initialized'
  except IOError as e:
    print "Failed to create settings: %s" % e.strerror
elif command == 'add':
  filename = sys.argv[2]
  if not os.path.isfile(filename):
    print 'File not found'
    exit()
  if os.path.isfile('.%s.got' % filename):
    print 'File already added'
    exit()
  sum = subprocess.check_output(['md5', '-q', filename]).rstrip()
  try:
    remote = get_remote()
    subprocess.check_call(['scp', filename, '%s/%s.got' % (remote, sum)])
    hash_file = open('.%s.got' % filename, 'w')
    hash_file.write('%s' % sum)
    hash_file.close()
  except IOError as e:
    print 'Failed to create got file: %s' % e.strerror
  subprocess.check_call(['git', 'add', '.%s.got' % filename])
  file = open('%s/.gitignore' % get_root(), 'w')
  file.write('%s\n' % filename)
  file.close()
  subprocess.check_call(['git', 'commit', '-m', 'File uploaded to got repository', '.%s.got' % filename])
elif command == 'get':
  pass
elif command == 'status':
  changed = []
  for root, dirnames, filenames in os.walk(get_root()):
    for filename in fnmatch.filter(filenames, '.*.got'):
      sum1 = subprocess.check_output(['md5', '-q', filename[1:-4]]).rstrip()
      sum2 = open(filename).read().rstrip()
      if sum1 != sum2:
        changed.append(filename[1:-4])
  print 'Changes\n-------\n%s' % changed
else:
  usage()
